{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\charindu\\\\Documents\\\\GitHub\\\\chatgpt_enhanced\\\\chatgpt-enhanced\\\\frontend\\\\src\\\\Pages\\\\MainPage.js\";\nimport { useState, useEffect } from \"react\";\nimport { CircularProgress } from \"@mui/material\";\nimport ChatInputForm from \"../Components/ChatInputForm\";\nimport ChatMessage from \"../Components/ChatMessage\";\nimport NewChatButton from \"../Components/NewChatButton\";\nimport Hero from \"../Components/Hero\";\nimport GoogleAuthButtons from \"../Components/GoogleAuthButtons\";\nimport MessageHistory from \"../Components/MessageHistory\";\nimport BugReportModal from \"../Components/BugReportModal\";\nimport { GoogleAuthProvider, getAuth, signInWithRedirect, getRedirectResult, signOut, onAuthStateChanged } from \"firebase/auth\";\nimport { collection, getDocs, getFirestore } from \"firebase/firestore\";\nimport { ref, push, get, set, update, increment } from \"firebase/database\";\nimport StoreButton from \"../Components/StoreButton\";\nimport \"./MainPage.css\";\nimport Disclaimer from \"../Components/Disclaimer\";\nimport TemperatureSlider from \"../Components/TemperatureSlider\";\nimport SignUpHeading from \"../Components/SignUpHeading\";\nimport NotSubscribedHeading from \"../Components/NotSubscribedHeading\";\nimport FreeTrial from \"../Components/FreeTrial\";\nimport ClearConversations from \"../Components/ClearConversations\";\nimport RateLimitError from \"../Components/RateLimitError\";\nimport ResponseFailedError from \"../Components/ResponseFailedError\";\nfunction MainPage({\n  app,\n  db\n}) {\n  const provider = new GoogleAuthProvider(app);\n  const auth = getAuth(app);\n  const firestoreDB = getFirestore(app);\n  const [user, setUser] = useState(null);\n  const [conversationId, setConversationId] = useState(null);\n  const [authLoading, setAuthLoading] = useState(true);\n  const [isLoggingIn, setIsLoggingIn] = useState(false);\n  const [subscription, setSubscription] = useState(null);\n  const [hasTrial, setHasTrial] = useState(false);\n  const [isRateLimited, setIsRateLimited] = useState(false);\n  const [responseFailed, setResponseFailed] = useState(false);\n  const [selectedModel, setSelectedModel] = useState(\"gpt-3.5-turbo\");\n  function handleNewChat() {\n    if (user) {\n      setConversationId(user.uid + Date.now());\n    }\n    clearInput();\n    clearChat();\n    setIsRateLimited(false);\n    setResponseFailed(false);\n  }\n\n  // Redirect user to google login\n  function handleLogin() {\n    setIsLoggingIn(true);\n    signInWithRedirect(auth, provider);\n    getRedirectResult(auth).then(() => {\n      console.log(\"Signed In\");\n    }).catch(error => {\n      console.log(error.message);\n    });\n  }\n\n  // Log user out, clear old messages and input\n  function handleLogout() {\n    signOut(auth).then(() => {\n      console.log(\"Logged out\");\n      clearInput();\n      clearChat();\n      setIsLoading(false);\n      setIsRateLimited(false);\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  // Check if a user has had a free trial and create one in database if they haven't\n  const handleTrialPeriod = user => {\n    const userRef = ref(db, `trials/${user.uid}`);\n    get(userRef).then(snapshot => {\n      if (snapshot.val() === null) {\n        // create a new user document with the createdAt timestamp\n        set(userRef, {\n          createdAt: Date.now()\n        }).then(() => {\n          console.log(\"Trial Started\");\n          checkTrialExpired(user);\n        }).catch(error => {\n          console.log(\"The write failed...\", error);\n        });\n      }\n    });\n  };\n\n  // Checks if user has free trial time\n  const checkTrialExpired = async user => {\n    if (!user) return;\n    const userRef = ref(db, `trials/${user.uid}`);\n    get(userRef).then(snapshot => {\n      if (snapshot.val() === null) return;\n      const trialData = snapshot.val();\n      const createdAt = trialData.createdAt;\n      const now = Date.now();\n      const oneDayInMilliseconds = 24 * 60 * 60 * 1000;\n      const trialDuration = now - createdAt;\n\n      // Return true if the trial has not yet expired (is less than one day old)\n      if (trialDuration < oneDayInMilliseconds) {\n        setHasTrial(true);\n      }\n    });\n  };\n  useEffect(() => {\n    // When the authentication state changes (user logging in/out)\n    onAuthStateChanged(auth, user => {\n      setAuthLoading(false);\n      // Update user\n      setUser(user);\n      // Give new conversation id\n      setConversationId(user.uid + Date.now());\n      // Load users sub data\n      loadSubscription();\n      // Create free trial if user has never had one\n      handleTrialPeriod(user);\n      // Check if free trial is still active\n      checkTrialExpired(user);\n    });\n  }, []);\n  const [input, setInput] = useState(\"\");\n  const [chatLog, setChatLog] = useState([]);\n  const [isLoading, setIsLoading] = useState(null);\n  // Default temperature is 0.5 (must match temperature sliders default value/100)\n  const [temperature, setTemperature] = useState(0.5);\n\n  // Set temperature to 0 when user swaps to codex model and 0.5 when swapping back\n  useEffect(() => {\n    setTemperature(selectedModel === \"code-davinci-002\" ? 0 : 0.5);\n  }, [selectedModel]);\n  function clearChat() {\n    setChatLog([]);\n  }\n  function clearInput() {\n    setInput(\"\");\n  }\n  async function handleSubmit(e) {\n    e.preventDefault();\n    // Create reference to user's chat log in the database\n    const chatRef = ref(db, `messages/${user.uid}/${conversationId}`);\n    // Create reference to user's token usage in the database\n    const tokenRef = ref(db, `token-usage/${user.uid}`);\n    // Add user's input to the chat log\n    let chatLogNew = [...chatLog, {\n      user: \"me\",\n      message: `${input}`\n    }];\n\n    // Check if the user is logged in\n    if (user) {\n      // Push the user's input to the database\n      push(chatRef, {\n        user: \"me\",\n        message: input,\n        timestamp: Date.now()\n      }).then(() => {})\n      // Log the error if the write failed\n      .catch(error => {\n        console.log(\"The write failed...\", error);\n      });\n    }\n    clearInput(); // Clear the input field\n    setChatLog(chatLogNew); // Set the new chat log with user's input\n    setIsLoading(true);\n\n    // Give the AI the last 5 messages for context as well as the recent input\n    const lastSix = chatLogNew.slice(Math.max(chatLogNew.length - 6, 0));\n    const messages = lastSix.map(message => message.message).join(\"\\n\");\n\n    // Fetch response from the backend\n    const response = await fetch(\"https://chat-gpt-enhanced-backend.herokuapp.com\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        uid: user.uid\n      },\n      // Post the last 6 messages (including the ai responses)\n      // and the temperature for the current prompt\n      body: JSON.stringify({\n        message: messages,\n        temperature: temperature,\n        model: selectedModel\n      })\n    }).catch(error => {\n      // Show response failed error\n      setResponseFailed(true);\n      setIsLoading(false);\n      throw new Error(\"API response was not okay\");\n    });\n\n    // If user hit rate limit display error\n    if (response.status === 429) {\n      setIsRateLimited(true);\n      setIsLoading(false);\n      throw new Error(\"Rate limit reached\");\n    }\n\n    // Response was successful\n    setIsRateLimited(false);\n    setResponseFailed(false);\n\n    // Get the response data in JSON format\n    const data = await response.json();\n\n    // Push the AI response to the database\n    push(chatRef, {\n      user: \"gpt\",\n      message: data.message,\n      timestamp: Date.now()\n    }).then(() => {}).catch(error => {\n      console.log(\"The write failed...\", error);\n    });\n\n    // Push the token usage to the database\n    update(tokenRef, {\n      total_tokens_used: increment(data.token_usage)\n    }).then(() => {}).catch(error => {\n      console.log(\"The write failed...\", error);\n    });\n\n    // Set the chat log with the AI response\n    setChatLog([...chatLogNew, {\n      user: \"gpt\",\n      message: `${data.message}`\n    }]);\n    setIsLoading(false);\n  }\n\n  // Get users subscription data\n  const loadSubscription = async () => {\n    // Get the current user\n    const sub = auth.currentUser;\n    // Get the reference to the user's subscriptions\n    const ref = await getDocs(collection(firestoreDB, `customers/${sub.uid}/subscriptions`));\n\n    // Set subscription details in state\n    ref.forEach(async doc => {\n      setSubscription({\n        role: doc.data().role,\n        current_period_end: doc.data().current_period_end,\n        current_period_start: doc.data().current_period_start,\n        ended_at: doc.data().ended_at,\n        status: doc.data().status\n      });\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"aside\", {\n    className: \"side-menu\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(NewChatButton, {\n    handleNewChat: handleNewChat,\n    isLoading: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 9\n    }\n  }), user && /*#__PURE__*/React.createElement(MessageHistory, {\n    userId: user.uid,\n    conversationId: conversationId,\n    db: db,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"white-buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ClearConversations, {\n    user: user,\n    db: db,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(BugReportModal, {\n    user: user,\n    db: db,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 11\n    }\n  })), hasTrial && (subscription === null || subscription === void 0 ? void 0 : subscription.role) !== \"premium\" && user && /*#__PURE__*/React.createElement(FreeTrial, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 66\n    }\n  }), /*#__PURE__*/React.createElement(StoreButton, {\n    user: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 9\n    }\n  }), !authLoading && /*#__PURE__*/React.createElement(GoogleAuthButtons, {\n    user: user,\n    handleLogin: handleLogin,\n    handleLogout: handleLogout,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"chat-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mobile-new-chat-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(NewChatButton, {\n    isLoading: isLoading,\n    handleNewChat: handleNewChat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 11\n    }\n  })), chatLog.length === 0 && !isRateLimited && /*#__PURE__*/React.createElement(Hero, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 52\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mobile-store-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 9\n    }\n  }, chatLog.length === 0 && /*#__PURE__*/React.createElement(StoreButton, {\n    user: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 36\n    }\n  })), !isRateLimited && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-log\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 11\n    }\n  }, chatLog.map((message, index) => /*#__PURE__*/React.createElement(ChatMessage, {\n    key: index,\n    message: message,\n    isLastMessage: index === chatLog.length - 1,\n    selectedModel: selectedModel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 15\n    }\n  })), isLoading === true && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"circular-progress\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    style: {\n      color: \"#b3befe\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 17\n    }\n  }))), isRateLimited && /*#__PURE__*/React.createElement(RateLimitError, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 27\n    }\n  }), responseFailed && /*#__PURE__*/React.createElement(ResponseFailedError, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 28\n    }\n  }), !user && !authLoading && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mobile-login-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(GoogleAuthButtons, {\n    user: user,\n    handleLogin: handleLogin,\n    handleLogout: handleLogout,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 13\n    }\n  })), hasTrial || (subscription === null || subscription === void 0 ? void 0 : subscription.role) === \"premium\" && !(subscription === null || subscription === void 0 ? void 0 : subscription.ended_at) && !isRateLimited && selectedModel === \"gpt-3.5-turbo\" && (subscription === null || subscription === void 0 ? void 0 : subscription.status) !== \"incomplete\" ? /*#__PURE__*/React.createElement(TemperatureSlider, {\n    setTemperature: setTemperature,\n    user: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 11\n    }\n  }) : null, !user && !authLoading && /*#__PURE__*/React.createElement(SignUpHeading, {\n    handleLogin: handleLogin,\n    isLoggingIn: isLoggingIn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 11\n    }\n  }), (subscription === null || subscription === void 0 ? void 0 : subscription.role) !== \"premium\" && user && !hasTrial && /*#__PURE__*/React.createElement(NotSubscribedHeading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 11\n    }\n  }), authLoading && /*#__PURE__*/React.createElement(CircularProgress, {\n    style: {\n      color: \"#b3befe\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 25\n    }\n  }), hasTrial || (subscription === null || subscription === void 0 ? void 0 : subscription.role) === \"premium\" && !(subscription === null || subscription === void 0 ? void 0 : subscription.ended_at) && !isRateLimited && (subscription === null || subscription === void 0 ? void 0 : subscription.status) !== \"incomplete\" ? /*#__PURE__*/React.createElement(ChatInputForm, {\n    input: input,\n    setInput: setInput,\n    handleSubmit: handleSubmit,\n    isLoading: isLoading,\n    user: user,\n    handleLogin: handleLogin,\n    selectedModel: selectedModel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 11\n    }\n  }) : null, /*#__PURE__*/React.createElement(Disclaimer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 9\n    }\n  })));\n}\nexport default MainPage;","map":{"version":3,"names":["useState","useEffect","CircularProgress","ChatInputForm","ChatMessage","NewChatButton","Hero","GoogleAuthButtons","MessageHistory","BugReportModal","GoogleAuthProvider","getAuth","signInWithRedirect","getRedirectResult","signOut","onAuthStateChanged","collection","getDocs","getFirestore","ref","push","get","set","update","increment","StoreButton","Disclaimer","TemperatureSlider","SignUpHeading","NotSubscribedHeading","FreeTrial","ClearConversations","RateLimitError","ResponseFailedError","MainPage","app","db","provider","auth","firestoreDB","user","setUser","conversationId","setConversationId","authLoading","setAuthLoading","isLoggingIn","setIsLoggingIn","subscription","setSubscription","hasTrial","setHasTrial","isRateLimited","setIsRateLimited","responseFailed","setResponseFailed","selectedModel","setSelectedModel","handleNewChat","uid","Date","now","clearInput","clearChat","handleLogin","then","console","log","catch","error","message","handleLogout","setIsLoading","handleTrialPeriod","userRef","snapshot","val","createdAt","checkTrialExpired","trialData","oneDayInMilliseconds","trialDuration","loadSubscription","input","setInput","chatLog","setChatLog","isLoading","temperature","setTemperature","handleSubmit","e","preventDefault","chatRef","tokenRef","chatLogNew","timestamp","lastSix","slice","Math","max","length","messages","map","join","response","fetch","method","headers","body","JSON","stringify","model","Error","status","data","json","total_tokens_used","token_usage","sub","currentUser","forEach","doc","role","current_period_end","current_period_start","ended_at","React","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","userId","index","key","isLastMessage","style","color"],"sources":["C:/Users/charindu/Documents/GitHub/chatgpt_enhanced/chatgpt-enhanced/frontend/src/Pages/MainPage.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { CircularProgress } from \"@mui/material\";\r\nimport ChatInputForm from \"../Components/ChatInputForm\";\r\nimport ChatMessage from \"../Components/ChatMessage\";\r\nimport NewChatButton from \"../Components/NewChatButton\";\r\nimport Hero from \"../Components/Hero\";\r\nimport GoogleAuthButtons from \"../Components/GoogleAuthButtons\";\r\nimport MessageHistory from \"../Components/MessageHistory\";\r\nimport BugReportModal from \"../Components/BugReportModal\";\r\nimport {\r\n  GoogleAuthProvider,\r\n  getAuth,\r\n  signInWithRedirect,\r\n  getRedirectResult,\r\n  signOut,\r\n  onAuthStateChanged,\r\n} from \"firebase/auth\";\r\nimport { collection, getDocs, getFirestore } from \"firebase/firestore\";\r\nimport { ref, push, get, set, update, increment } from \"firebase/database\";\r\nimport StoreButton from \"../Components/StoreButton\";\r\nimport \"./MainPage.css\";\r\nimport Disclaimer from \"../Components/Disclaimer\";\r\nimport TemperatureSlider from \"../Components/TemperatureSlider\";\r\nimport SignUpHeading from \"../Components/SignUpHeading\";\r\nimport NotSubscribedHeading from \"../Components/NotSubscribedHeading\";\r\nimport FreeTrial from \"../Components/FreeTrial\";\r\nimport ClearConversations from \"../Components/ClearConversations\";\r\nimport RateLimitError from \"../Components/RateLimitError\";\r\nimport ResponseFailedError from \"../Components/ResponseFailedError\";\r\n\r\nfunction MainPage({ app, db }) {\r\n  const provider = new GoogleAuthProvider(app);\r\n  const auth = getAuth(app);\r\n  const firestoreDB = getFirestore(app);\r\n\r\n  const [user, setUser] = useState(null);\r\n  const [conversationId, setConversationId] = useState(null);\r\n  const [authLoading, setAuthLoading] = useState(true);\r\n  const [isLoggingIn, setIsLoggingIn] = useState(false);\r\n  const [subscription, setSubscription] = useState(null);\r\n  const [hasTrial, setHasTrial] = useState(false);\r\n  const [isRateLimited, setIsRateLimited] = useState(false);\r\n  const [responseFailed, setResponseFailed] = useState(false);\r\n  const [selectedModel, setSelectedModel] = useState(\"gpt-3.5-turbo\");\r\n\r\n  function handleNewChat() {\r\n    if (user) {\r\n      setConversationId(user.uid + Date.now());\r\n    }\r\n    clearInput();\r\n    clearChat();\r\n    setIsRateLimited(false);\r\n    setResponseFailed(false);\r\n  }\r\n\r\n  // Redirect user to google login\r\n  function handleLogin() {\r\n    setIsLoggingIn(true);\r\n    signInWithRedirect(auth, provider);\r\n    getRedirectResult(auth)\r\n      .then(() => {\r\n        console.log(\"Signed In\");\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.message);\r\n      });\r\n  }\r\n\r\n  // Log user out, clear old messages and input\r\n  function handleLogout() {\r\n    signOut(auth)\r\n      .then(() => {\r\n        console.log(\"Logged out\");\r\n        clearInput();\r\n        clearChat();\r\n        setIsLoading(false);\r\n        setIsRateLimited(false);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  // Check if a user has had a free trial and create one in database if they haven't\r\n  const handleTrialPeriod = (user) => {\r\n    const userRef = ref(db, `trials/${user.uid}`);\r\n\r\n    get(userRef).then((snapshot) => {\r\n      if (snapshot.val() === null) {\r\n        // create a new user document with the createdAt timestamp\r\n        set(userRef, {\r\n          createdAt: Date.now(),\r\n        })\r\n          .then(() => {\r\n            console.log(\"Trial Started\");\r\n            checkTrialExpired(user);\r\n          })\r\n          .catch((error) => {\r\n            console.log(\"The write failed...\", error);\r\n          });\r\n      }\r\n    });\r\n  };\r\n\r\n  // Checks if user has free trial time\r\n  const checkTrialExpired = async (user) => {\r\n    if (!user) return;\r\n\r\n    const userRef = ref(db, `trials/${user.uid}`);\r\n\r\n    get(userRef).then((snapshot) => {\r\n      if (snapshot.val() === null) return;\r\n\r\n      const trialData = snapshot.val();\r\n      const createdAt = trialData.createdAt;\r\n      const now = Date.now();\r\n\r\n      const oneDayInMilliseconds = 24 * 60 * 60 * 1000;\r\n      const trialDuration = now - createdAt;\r\n\r\n      // Return true if the trial has not yet expired (is less than one day old)\r\n      if (trialDuration < oneDayInMilliseconds) {\r\n        setHasTrial(true);\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // When the authentication state changes (user logging in/out)\r\n    onAuthStateChanged(auth, (user) => {\r\n      setAuthLoading(false);\r\n      // Update user\r\n      setUser(user);\r\n      // Give new conversation id\r\n      setConversationId(user.uid + Date.now());\r\n      // Load users sub data\r\n      loadSubscription();\r\n      // Create free trial if user has never had one\r\n      handleTrialPeriod(user);\r\n      // Check if free trial is still active\r\n      checkTrialExpired(user);\r\n    });\r\n  }, []);\r\n\r\n  const [input, setInput] = useState(\"\");\r\n  const [chatLog, setChatLog] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(null);\r\n  // Default temperature is 0.5 (must match temperature sliders default value/100)\r\n  const [temperature, setTemperature] = useState(0.5);\r\n\r\n  // Set temperature to 0 when user swaps to codex model and 0.5 when swapping back\r\n  useEffect(() => {\r\n    setTemperature(selectedModel === \"code-davinci-002\" ? 0 : 0.5);\r\n  }, [selectedModel]);\r\n\r\n  function clearChat() {\r\n    setChatLog([]);\r\n  }\r\n\r\n  function clearInput() {\r\n    setInput(\"\");\r\n  }\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n    // Create reference to user's chat log in the database\r\n    const chatRef = ref(db, `messages/${user.uid}/${conversationId}`);\r\n    // Create reference to user's token usage in the database\r\n    const tokenRef = ref(db, `token-usage/${user.uid}`);\r\n    // Add user's input to the chat log\r\n    let chatLogNew = [...chatLog, { user: \"me\", message: `${input}` }];\r\n\r\n    // Check if the user is logged in\r\n    if (user) {\r\n      // Push the user's input to the database\r\n      push(chatRef, {\r\n        user: \"me\",\r\n        message: input,\r\n        timestamp: Date.now(),\r\n      })\r\n        .then(() => {})\r\n        // Log the error if the write failed\r\n        .catch((error) => {\r\n          console.log(\"The write failed...\", error);\r\n        });\r\n    }\r\n\r\n    clearInput(); // Clear the input field\r\n    setChatLog(chatLogNew); // Set the new chat log with user's input\r\n    setIsLoading(true);\r\n\r\n    // Give the AI the last 5 messages for context as well as the recent input\r\n    const lastSix = chatLogNew.slice(Math.max(chatLogNew.length - 6, 0));\r\n    const messages = lastSix.map((message) => message.message).join(\"\\n\");\r\n\r\n    // Fetch response from the backend\r\n    const response = await fetch(\r\n      \"https://chat-gpt-enhanced-backend.herokuapp.com\",\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          uid: user.uid,\r\n        },\r\n        // Post the last 6 messages (including the ai responses)\r\n        // and the temperature for the current prompt\r\n        body: JSON.stringify({\r\n          message: messages,\r\n          temperature: temperature,\r\n          model: selectedModel,\r\n        }),\r\n      }\r\n    ).catch((error) => {\r\n      // Show response failed error\r\n      setResponseFailed(true);\r\n      setIsLoading(false);\r\n      throw new Error(\"API response was not okay\");\r\n    });\r\n\r\n    // If user hit rate limit display error\r\n    if (response.status === 429) {\r\n      setIsRateLimited(true);\r\n      setIsLoading(false);\r\n      throw new Error(\"Rate limit reached\");\r\n    }\r\n\r\n    // Response was successful\r\n    setIsRateLimited(false);\r\n    setResponseFailed(false);\r\n\r\n    // Get the response data in JSON format\r\n    const data = await response.json();\r\n\r\n    // Push the AI response to the database\r\n    push(chatRef, {\r\n      user: \"gpt\",\r\n      message: data.message,\r\n      timestamp: Date.now(),\r\n    })\r\n      .then(() => {})\r\n      .catch((error) => {\r\n        console.log(\"The write failed...\", error);\r\n      });\r\n\r\n    // Push the token usage to the database\r\n    update(tokenRef, {\r\n      total_tokens_used: increment(data.token_usage),\r\n    })\r\n      .then(() => {})\r\n      .catch((error) => {\r\n        console.log(\"The write failed...\", error);\r\n      });\r\n\r\n    // Set the chat log with the AI response\r\n    setChatLog([...chatLogNew, { user: \"gpt\", message: `${data.message}` }]);\r\n    setIsLoading(false);\r\n  }\r\n\r\n  // Get users subscription data\r\n  const loadSubscription = async () => {\r\n    // Get the current user\r\n    const sub = auth.currentUser;\r\n    // Get the reference to the user's subscriptions\r\n    const ref = await getDocs(\r\n      collection(firestoreDB, `customers/${sub.uid}/subscriptions`)\r\n    );\r\n\r\n    // Set subscription details in state\r\n    ref.forEach(async (doc) => {\r\n      setSubscription({\r\n        role: doc.data().role,\r\n        current_period_end: doc.data().current_period_end,\r\n        current_period_start: doc.data().current_period_start,\r\n        ended_at: doc.data().ended_at,\r\n        status: doc.data().status,\r\n      });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* Side menu (not visible on mobile) */}\r\n      <aside className=\"side-menu\">\r\n        <NewChatButton handleNewChat={handleNewChat} isLoading={isLoading} />\r\n        {/* Display message history if user is logged in */}\r\n        {user && (\r\n          <MessageHistory\r\n            userId={user.uid}\r\n            conversationId={conversationId}\r\n            db={db}\r\n          />\r\n        )}\r\n\r\n        <div className=\"white-buttons\">\r\n          <ClearConversations user={user} db={db} />\r\n          <BugReportModal user={user} db={db} />\r\n        </div>\r\n\r\n        {/* Displays users free trial status */}\r\n        {hasTrial && subscription?.role !== \"premium\" && user && <FreeTrial />}\r\n\r\n        {/* Takes user to the store, only displayed if user is logged in */}\r\n        <StoreButton user={user} />\r\n\r\n        {/* Login/logout buttons */}\r\n        {!authLoading && (\r\n          <GoogleAuthButtons\r\n            user={user}\r\n            handleLogin={handleLogin}\r\n            handleLogout={handleLogout}\r\n          />\r\n        )}\r\n      </aside>\r\n\r\n      {/* Chat box */}\r\n      <section className=\"chat-box\">\r\n        {/* New chat button for mobile only */}\r\n        <div className=\"mobile-new-chat-button\">\r\n          <NewChatButton isLoading={isLoading} handleNewChat={handleNewChat} />\r\n        </div>\r\n\r\n        {/* Only display hero if theres no chats and if user isn't rate limited */}\r\n        {chatLog.length === 0 && !isRateLimited && <Hero />}\r\n\r\n        {/* Store button for mobile only */}\r\n        <div className=\"mobile-store-button\">\r\n          {chatLog.length === 0 && <StoreButton user={user} />}\r\n        </div>\r\n\r\n        {/* Chat log (the actual messages) */}\r\n        {!isRateLimited && (\r\n          <div className=\"chat-log\">\r\n            {chatLog.map((message, index) => (\r\n              <ChatMessage\r\n                key={index}\r\n                message={message}\r\n                isLastMessage={index === chatLog.length - 1}\r\n                selectedModel={selectedModel}\r\n              />\r\n            ))}\r\n            {isLoading === true && (\r\n              <div className=\"circular-progress\">\r\n                <CircularProgress style={{ color: \"#b3befe\" }} />\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {/* Error messages */}\r\n        {isRateLimited && <RateLimitError />}\r\n        {responseFailed && <ResponseFailedError />}\r\n\r\n        {/* \r\n          Login button for mobile only \r\n          Right now its set up to only display the login button need to rework\r\n          the ui for mobile \r\n        */}\r\n        {!user && !authLoading && (\r\n          <div className=\"mobile-login-button\">\r\n            <GoogleAuthButtons\r\n              user={user}\r\n              handleLogin={handleLogin}\r\n              handleLogout={handleLogout}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {/* If user is subscribed or has trial display temperature slider */}\r\n        {hasTrial ||\r\n        (subscription?.role === \"premium\" &&\r\n          !subscription?.ended_at &&\r\n          !isRateLimited &&\r\n          selectedModel === \"gpt-3.5-turbo\" &&\r\n          subscription?.status !== \"incomplete\") ? (\r\n          <TemperatureSlider setTemperature={setTemperature} user={user} />\r\n        ) : null}\r\n\r\n        {/* If the user is not signed in display sign up heading */}\r\n        {!user && !authLoading && (\r\n          <SignUpHeading handleLogin={handleLogin} isLoggingIn={isLoggingIn} />\r\n        )}\r\n\r\n        {/* If the user isn't subscribed display the visit store heading */}\r\n        {subscription?.role !== \"premium\" && user && !hasTrial && (\r\n          <NotSubscribedHeading />\r\n        )}\r\n\r\n        {/* Loading spinner when user is logging in */}\r\n        {authLoading && <CircularProgress style={{ color: \"#b3befe\" }} />}\r\n\r\n        {/* If the user is subscribed or has trial display the chat input form */}\r\n        {hasTrial ||\r\n        (subscription?.role === \"premium\" &&\r\n          !subscription?.ended_at &&\r\n          !isRateLimited &&\r\n          subscription?.status !== \"incomplete\") ? (\r\n          <ChatInputForm\r\n            input={input}\r\n            setInput={setInput}\r\n            handleSubmit={handleSubmit}\r\n            isLoading={isLoading}\r\n            user={user}\r\n            handleLogin={handleLogin}\r\n            selectedModel={selectedModel}\r\n          />\r\n        ) : null}\r\n\r\n        <Disclaimer />\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}