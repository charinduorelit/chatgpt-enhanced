{"ast":null,"code":"import { AnimationType } from '../render/utils/types.mjs';\nimport { usePointerEvent } from '../events/use-pointer-event.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { useMemo } from 'react';\nfunction isMouseEvent(event) {\n  return event.type !== \"pen\" && event.type !== \"touch\";\n}\nfunction createHoverEvent(visualElement, isActive, callback) {\n  return (event, info) => {\n    if (!isMouseEvent(event) || isDragActive()) return;\n    /**\n     * Ensure we trigger animations before firing event callback\n     */\n    if (visualElement.animationState) {\n      visualElement.animationState.setActive(AnimationType.Hover, isActive);\n    }\n    callback && callback(event, info);\n  };\n}\nfunction useHoverGesture({\n  onHoverStart,\n  onHoverEnd,\n  whileHover,\n  visualElement\n}) {\n  usePointerEvent(visualElement, \"pointerenter\", useMemo(() => {\n    return onHoverStart || whileHover ? createHoverEvent(visualElement, true, onHoverStart) : undefined;\n  }, [onHoverStart, Boolean(whileHover), visualElement]), {\n    passive: !onHoverStart\n  });\n  usePointerEvent(visualElement, \"pointerleave\", useMemo(() => {\n    return onHoverEnd || whileHover ? createHoverEvent(visualElement, false, onHoverEnd) : undefined;\n  }, [onHoverStart, Boolean(whileHover), visualElement]), {\n    passive: !onHoverEnd\n  });\n}\nexport { useHoverGesture };","map":null,"metadata":{},"sourceType":"module"}