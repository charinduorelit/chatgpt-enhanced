{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\charindu\\\\Documents\\\\GitHub\\\\chatgpt_enhanced\\\\chatgpt-enhanced\\\\frontend\\\\src\\\\Components\\\\MessageHistory.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { ref, get, onValue } from \"firebase/database\";\nimport { motion } from \"framer-motion\";\nimport \"./MessageHistory.css\";\n\n// TODO: Allow user to view full conversation when they click a message in history\n\n// Displays first message of each conversation\nfunction MessageHistory({\n  userId,\n  db\n}) {\n  const [messageHistory, setMessageHistory] = useState([]);\n\n  // Fetch first message of each conversation\n  useEffect(() => {\n    // only run if user is logged in\n    if (userId) {\n      // Get the reference to the database\n      onValue(ref(db, `messages/${userId}/`), snapshot => {\n        // Check if data exists for the user\n        if (snapshot.exists()) {\n          // Get the conversation ids\n          const conversationIds = Object.keys(snapshot.val());\n          // Create an array to hold the first message of each conversation\n          const firstMessages = [];\n          // Loop through each conversation\n          conversationIds.forEach(conversationId => {\n            // Get the database reference for each conversation\n            get(ref(db, `messages/${userId}/${conversationId}`)).then(snapshot => {\n              // Check if data exists for the conversation\n              if (snapshot.exists()) {\n                // Get the first message of the conversation\n                const firstMessage = Object.values(snapshot.val())[0];\n                // Add the first message to the list\n                firstMessages.push(firstMessage);\n                // Check if all conversations have been processed\n                if (firstMessages.length === conversationIds.length) {\n                  // Reverse the order of the messages\n                  const reversedMessages = firstMessages.reverse();\n                  // Update the state with the message history\n                  setMessageHistory(reversedMessages);\n                }\n              } else {\n                console.log(\"No data available\");\n              }\n            });\n          });\n        } else {\n          setMessageHistory([]);\n          console.log(\"No data available\");\n        }\n      });\n    }\n  }, [userId, db]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"message-history-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, messageHistory.map((message, index) =>\n  /*#__PURE__*/\n  // Display the first message for each conversation\n  React.createElement(\"button\", {\n    className: \"message-button\",\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(motion.div, {\n    // fade messages in\n    initial: {\n      opacity: 0.5\n    },\n    animate: {\n      opacity: 1\n    },\n    transition: {\n      duration: 0.1\n    },\n    className: \"message-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: 2,\n    viewBox: \"0 0 24 24\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    className: \"message-svg\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"truncate-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, message.user === \"me\" &&\n  // Uppercase first character of message\n  message.message.charAt(0).toUpperCase() + message.message.slice(1))))));\n}\nexport default MessageHistory;","map":{"version":3,"names":["React","useState","useEffect","ref","get","onValue","motion","MessageHistory","userId","db","messageHistory","setMessageHistory","snapshot","exists","conversationIds","Object","keys","val","firstMessages","forEach","conversationId","then","firstMessage","values","push","length","reversedMessages","reverse","console","log","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","key","div","initial","opacity","animate","transition","duration","stroke","fill","strokeWidth","viewBox","strokeLinecap","strokeLinejoin","xmlns","d","user","charAt","toUpperCase","slice"],"sources":["C:/Users/charindu/Documents/GitHub/chatgpt_enhanced/chatgpt-enhanced/frontend/src/Components/MessageHistory.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { ref, get, onValue } from \"firebase/database\";\r\nimport { motion } from \"framer-motion\";\r\nimport \"./MessageHistory.css\";\r\n\r\n// TODO: Allow user to view full conversation when they click a message in history\r\n\r\n// Displays first message of each conversation\r\nfunction MessageHistory({ userId, db }) {\r\n  const [messageHistory, setMessageHistory] = useState([]);\r\n\r\n  // Fetch first message of each conversation\r\n  useEffect(() => {\r\n    // only run if user is logged in\r\n    if (userId) {\r\n      // Get the reference to the database\r\n      onValue(ref(db, `messages/${userId}/`), (snapshot) => {\r\n        // Check if data exists for the user\r\n        if (snapshot.exists()) {\r\n          // Get the conversation ids\r\n          const conversationIds = Object.keys(snapshot.val());\r\n          // Create an array to hold the first message of each conversation\r\n          const firstMessages = [];\r\n          // Loop through each conversation\r\n          conversationIds.forEach((conversationId) => {\r\n            // Get the database reference for each conversation\r\n            get(ref(db, `messages/${userId}/${conversationId}`)).then(\r\n              (snapshot) => {\r\n                // Check if data exists for the conversation\r\n                if (snapshot.exists()) {\r\n                  // Get the first message of the conversation\r\n                  const firstMessage = Object.values(snapshot.val())[0];\r\n                  // Add the first message to the list\r\n                  firstMessages.push(firstMessage);\r\n                  // Check if all conversations have been processed\r\n                  if (firstMessages.length === conversationIds.length) {\r\n                    // Reverse the order of the messages\r\n                    const reversedMessages = firstMessages.reverse();\r\n                    // Update the state with the message history\r\n                    setMessageHistory(reversedMessages);\r\n                  }\r\n                } else {\r\n                  console.log(\"No data available\");\r\n                }\r\n              }\r\n            );\r\n          });\r\n        } else {\r\n          setMessageHistory([]);\r\n          console.log(\"No data available\");\r\n        }\r\n      });\r\n    }\r\n  }, [userId, db]);\r\n\r\n  return (\r\n    <div className=\"message-history-container\">\r\n      {/*Loop through the message history */}\r\n      {messageHistory.map((message, index) => (\r\n        // Display the first message for each conversation\r\n        <button className=\"message-button\" key={index}>\r\n          <motion.div\r\n            // fade messages in\r\n            initial={{ opacity: 0.5 }}\r\n            animate={{ opacity: 1 }}\r\n            transition={{ duration: 0.1 }}\r\n            className=\"message-container\"\r\n          >\r\n            {/* Chat bubble svg */}\r\n            <svg\r\n              stroke=\"currentColor\"\r\n              fill=\"none\"\r\n              strokeWidth={2}\r\n              viewBox=\"0 0 24 24\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              className=\"message-svg\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n              <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\" />\r\n            </svg>\r\n\r\n            {/* Truncated message */}\r\n            <p className=\"truncate-text\">\r\n              {message.user === \"me\" &&\r\n                // Uppercase first character of message\r\n                message.message.charAt(0).toUpperCase() +\r\n                  message.message.slice(1)}\r\n            </p>\r\n          </motion.div>\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MessageHistory;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}